{"version":3,"sources":["assets/Shure_mikrofon_55S.jpg","components/Navbar/Logout/Logout.js","components/Navbar/Navbar.js","helpers/environment.js","components/Main/Auth/Auth.js","components/Main/Posts/Post/Post.js","components/Main/Posts/Posts.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Logout","props","react_default","a","createElement","className","src","logoutPic","alt","onClick","logout","Navbar","titlePic","Navbar_Logout_Logout","APIURL","window","location","hostname","Auth","state","login","userName","email","isBand","password","handleSubmit","event","preventDefault","url","_this","concat","APIUrl","fetch","method","body","JSON","stringify","headers","Content-Type","then","response","json","data","tokenHandler","sessionToken","handleChange","setState","Object","defineProperty","target","id","value","console","log","logginToggle","title","this","signupFields","htmlFor","type","onChange","onSubmit","Component","Post","post","bandName","influentialArtists","lookingFor","instrumentsSkills","Posts","pies","_this2","res","posts","postRows","map","Posts_Post_Post","App","undefined","removeSessionToken","storeSessionToken","input","Main_Posts_Posts","Main_Auth_Auth","components_Navbar_Navbar","viewConductor","Boolean","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5a38bbe5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Shure_mikrofon_55S.7c625113.jpg\";","import React from 'react';\r\n\r\nimport './Logout.css';\r\nimport logoutPic from '../../../assets/Shure_mikrofon_55S.jpg';\r\n\r\nconst Logout = (props) => {\r\n    return(\r\n        <img className=\"Logout\" src={logoutPic} alt=\"Logout\" onClick={props.logout} />\r\n    )\r\n}\r\n\r\nexport default Logout;","import React from 'react';\r\n\r\nimport './Navbar.css';\r\nimport titlePic from './../../assets/Shure_mikrofon_55S.jpg';\r\nimport Logout from './Logout/Logout';\r\n\r\nconst Navbar = (props) => {\r\n    return(\r\n        <nav>\r\n            <img src={titlePic} alt=\"Title\" />\r\n            <Logout logout={props.logout} />\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","let APIURL = '';\r\n\r\nswitch (window.location.hostname) {\r\n    //this is the local host name of your react app\r\n    case 'localhost' || '127.0.0.1':\r\n        //this is the local host name of your API;\r\n        APIURL = 'http://localhost:3000<Port of your local API>';\r\n        break;\r\n    // this is the deployed react application\r\n    case 'kj-start-a-band-client.herokuapp.com':\r\n        //this is the full url of your deployed API\r\n        APIURL = 'https://kj-start-a-band.herokuapp.com'\r\n}\r\n\r\nexport default APIURL;","import React, {Component} from 'react';\r\n\r\nimport APIUrl from '../../../helpers/environment';\r\n\r\n\r\nimport './Auth.css';\r\n\r\nclass Auth extends Component {\r\n\r\n    state = {\r\n        login: true,\r\n        userName: '',\r\n        email: '',\r\n        isBand: '',\r\n        password: ''\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        const url = this.state.login ? `${APIUrl}/auth/signin` : `${APIUrl}/auth/signup`\r\n\r\n        fetch(url, {\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n                userName: this.state.userName,\r\n                email: this.state.email,\r\n                isBand: this.state.isBand,\r\n                password: this.state.password\r\n            }),\r\n            headers: {\r\n                'Content-Type' : 'application/json'\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => this.props.tokenHandler(data.sessionToken))\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({[event.target.id]: event.target.value}, () => console.log(this.state))\r\n    }\r\n\r\n    logginToggle = (event) => {\r\n        event.preventDefault();\r\n        const login = this.state.login;\r\n        this.setState({\r\n            login: !login,\r\n            userName: '',\r\n            email: '',\r\n            isBand: '',\r\n            password: '',    \r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        let title = this.state.login ? \"Login\" : \"Signup\";\r\n\r\n        let signupFields = this.state.login\r\n            ? null\r\n            : (\r\n                <div>\r\n                    <label htmlFor=\"userName\">UserName:</label><br />\r\n                    <input type=\"text\" id=\"firstName\" onChange={this.handleChange} value={this.state.userName}/><br />\r\n                    <label htmlFor=\"userName\">UserName:</label><br />\r\n                    <input type=\"text\" id=\"firstName\" onChange={this.handleChange} value={this.state.userName}/><br />\r\n                    \r\n                </div>\r\n            )\r\n\r\n            return(\r\n                <form className=\"cardlike\" onSubmit={this.handleSubmit}>\r\n                    <h1>{title}</h1>\r\n                    <label htmlFor=\"email\">Email:</label><br />\r\n                    <input type=\"text\" id=\"email\" onChange={this.handleChange} value={this.state.email} /><br />\r\n                    <label htmlFor=\"password\">Password:</label><br /> \r\n                    <input type=\"text\" id=\"password\" onChange={this.handleChange} value={this.state.password} /><br />\r\n                    {signupFields}\r\n                    <button onClick={this.logginToggle}>Login/Signup Toggle</button><br />\r\n                    <button type=\"submit\">Submit User Data</button>\r\n                </form>\r\n            )\r\n    }\r\n}\r\n\r\nexport default Auth;","import React from 'react';\r\n\r\nconst Post = (props) => {\r\n    return(\r\n        <tr>\r\n            <td>{props.post.bandName}</td>\r\n            <td>{props.post.location}</td>\r\n            <td>{props.post.influentialArtists}</td>\r\n            <td>{props.post.lookingFor}</td>\r\n            <td>{props.post.instrumentsSkills}</td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default Post;","import React, {Component} from 'react';\r\n\r\nimport APIUrl from '../../../helpers/environment';\r\n\r\nimport Post from './Post/Post'\r\nimport './Posts.css';\r\n\r\nclass Posts extends Component {\r\n    state = {\r\n        pies: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(`${APIUrl}/post`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n            .then(res => res.json())\r\n            .then(json => this.setState({posts: json}))\r\n    }\r\n\r\n    render() {\r\n        let postRows = this.state.posts.map(post => {\r\n            return(\r\n                <Post post={post}/>\r\n\r\n            )\r\n        })\r\n\r\n        return(\r\n            <table>\r\n                <tbody>\r\n                    {postRows}\r\n                </tbody>\r\n            </table>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Posts;","import React, { Component } from 'react';\n\nimport Navbar from './components/Navbar/Navbar';\nimport './App.css';\nimport Auth from './components/Main/Auth/Auth';\nimport Posts from './components/Main/Posts/Posts';\nimport APIUrl from './helpers/environment';\n\nclass App extends Component {\n  state = {\n    sessionToken: undefined\n  }\n\n  //mock function\n\n  handleSubmit = (event) => {\n    fetch(`${APIUrl}/pies/${event.target.value}`)\n  }\n  //\n\n  removeSessionToken = () => {\n    this.setState({sessionToken: undefined})\n  }\n\n  storeSessionToken = (input) => {\n    this.setState({sessionToken: input})\n  }\n\n  viewConductor() {\n    return (this.state.sessionToken !== undefined) ? <Posts />: <Auth tokenHandler={this.storeSessionToken}/>\n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar logout={this.removeSessionToken}/>\n        {this.viewConductor()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}